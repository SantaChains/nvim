-- Neovim 插件文件命名规范
-- 
-- 📁 文件分类和命名约定：
--
-- 🔧 核心功能类 (Core Functionality)
-- ├── editor-enhance.lua    # 编辑增强：surround, markdown, zen-mode, splits, treesj
-- ├── dev-tools.lua         # 开发工具：格式化, treesitter, 文件浏览, 搜索, 终端, 注释
-- └── navigation.lua        # 导航移动：tmux集成, 区域选择, 文档生成
--
-- 🎨 界面美化类 (UI & Appearance)  
-- ├── theme.lua            # 主题配色：colorscheme, highlights
-- ├── bufferline.lua       # 标签页美化：buffer管理
-- ├── snack-preset.lua     # 启动页：dashboard preset模式
-- └── snack-sections.lua#  # 启动页：dashboard sections模式
--
-- 🧠 智能功能类 (Intelligence)
-- ├── lsp-config.lua       # LSP配置：语言服务器设置
-- ├── lsp-ui.lua          # LSP界面：UI增强和交互
-- ├── mason.lua           # 工具管理：LSP/DAP/linters安装
-- ├── blink-cmp.lua       # 智能补全：补全引擎配置
-- └── debugger.lua        # 调试工具：DAP调试配置
--
-- ⌨️  交互辅助类 (Interaction)
-- ├── which-key.lua       # 键位提示：快捷键管理
-- └── community.lua       # 社区插件：flash, multi-cursor, AI助手
--
-- 📋 命名原则：
-- 1. 使用 kebab-case 命名风格（小写+连字符）
-- 2. 名称直接反映功能职责，避免模糊词汇
-- 3. 按功能分组，每个文件职责单一且明确
-- 4. 特殊标记：# 表示备用配置文件
-- 5. 注释说明插件的主要功能和用途
--
-- 🔄 迁移对照表：
-- essential.lua  -> editor-enhance.lua  (编辑增强更准确)
-- quicker.lua    -> dev-tools.lua       (开发工具更直观)  
-- extra.lua      -> navigation.lua      (导航功能更明确)
-- recommend.lua  -> community.lua       (社区插件更合适)
--
-- 💡 使用建议：
-- - 新增插件时根据功能选择对应文件
-- - 功能复杂的插件可以独立成文件
-- - 保持每个文件的插件数量适中（10-20个）
-- - 定期检查和整理插件分类