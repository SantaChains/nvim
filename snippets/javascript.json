{
  "function": {
    "prefix": "func",
    "body": [
      "function ${1:functionName}(${2:params}) {",
      "  ${3:// body}",
      "  return ${4:null};",
      "}"
    ]
  },
  "arrow function": {
    "prefix": "arrow",
    "body": [
      "const ${1:functionName} = (${2:params}) => {",
      "  ${3:// body}",
      "  return ${4:null};",
      "};"
    ]
  },
  "console log": {
    "prefix": "log",
    "body": "console.log('${1:message}', ${2:data});"
  },
  "console error": {
    "prefix": "error",
    "body": "console.error('${1:error}', ${2:data});"
  },
  "if statement": {
    "prefix": "if",
    "body": [
      "if (${1:condition}) {",
      "  ${2:// body}",
      "}"
    ]
  },
  "if else statement": {
    "prefix": "ife",
    "body": [
      "if (${1:condition}) {",
      "  ${2:// body}",
      "} else {",
      "  ${3:// else body}",
      "}"
    ]
  },
  "for loop": {
    "prefix": "for",
    "body": [
      "for (let ${1:i} = 0; ${1:i} < ${2:length}; ${1:i}++) {",
      "  ${3:// body}",
      "}"
    ]
  },
  "for each": {
    "prefix": "foreach",
    "body": [
      "${1:array}.forEach((${2:item}) => {",
      "  ${3:// body}",
      "});"
    ]
  },
  "while loop": {
    "prefix": "while",
    "body": [
      "while (${1:condition}) {",
      "  ${2:// body}",
      "}"
    ]
  },
  "try catch": {
    "prefix": "try",
    "body": [
      "try {",
      "  ${1:// body}",
      "} catch (${2:error}) {",
      "  ${3:// handle error}",
      "}"
    ]
  },
  "async function": {
    "prefix": "async",
    "body": [
      "async function ${1:functionName}(${2:params}) {",
      "  ${3:// body}",
      "  return ${4:null};",
      "}"
    ]
  },
  "await": {
    "prefix": "await",
    "body": "await ${1:promise};"
  },
  "export": {
    "prefix": "export",
    "body": "export ${1:const} ${2:name} = ${3:value};"
  },
  "import": {
    "prefix": "import",
    "body": "import { ${1:module} } from '${2:package}';"
  },
  "useState": {
    "prefix": "usestate",
    "body": "const [${1:state}, set${2:State}] = useState(${3:initialValue});"
  },
  "useEffect": {
    "prefix": "useeffect",
    "body": [
      "useEffect(() => {",
      "  ${1:// effect}",
      "  return () => {",
      "    ${2:// cleanup}",
      "  };",
      "}, [${3:dependencies}]);"
    ]
  }
}