-- https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/config/keymaps.lua

-- learder
-- vim.g.mapleader = " "
-- hjkl 可以跨行

vim.opt.whichwrap:append("h,l,<,>,[,]")
-- b,s,~
local keymap = vim.keymap
local opts = {
    noremap = true,
    silent = true
}

-- ---------- 插入模式 ---------- ---
keymap.set("i", "jk", "<ESC>")
keymap.set("v", "<C-J>", "<ESC>")
-- ---------- 视觉模式 ---------- ---
-- 单行或多行移动
keymap.set("v", "J", ":m '>+1<CR>gv=gv")
keymap.set("v", "K", ":m '<-2<CR>gv=gv")

-- ---------- 正常模式 ---------- ---
-- 窗口
keymap.set("n", "<leader>sv", "<C-w>v") -- 水平新增窗口 
keymap.set("n", "<leader>sh", "<C-w>s") -- 垂直新增窗口

-- 取消高亮
keymap.set("n", "<leader>nh", ":nohl<CR>")

-- 切换buffer
keymap.set("n", "<C-L>", ":bnext<CR>")
keymap.set("n", "<C-H>", ":bprevious<CR>")
------------------------------------------

-- 光标移动时保持居中（避免光标跑到屏幕边缘）
-- 添加防抖功能，避免频繁执行zz
local last_move_j = 0
local last_move_k = 0

vim.keymap.set("n", "j", function()
    vim.cmd("normal! j")
    local now = vim.loop.now()
    if now - last_move_j > 100 then  -- 100ms 防抖
        vim.cmd("normal! zz")
        last_move_j = now
    end
end, { silent = true })

vim.keymap.set("n", "k", function()
    vim.cmd("normal! k")
    local now = vim.loop.now()
    if now - last_move_k > 100 then  -- 100ms 防抖
        vim.cmd("normal! zz")
        last_move_k = now
    end
end, { silent = true })
vim.keymap.set("n", "<C-d>", "<C-d>zz", {
    silent = true
})
vim.keymap.set("n", "<C-u>", "<C-u>zz", {
    silent = true
})
vim.keymap.set("n", "n", "nzzzv", {
    silent = true
}) -- 搜索结果居中
vim.keymap.set("n", "N", "Nzzzv", {
    silent = true
})

-- 禁用方向键（强制使用 hjkl 提升效率，可选）
-- vim.keymap.set({"n", "i"}, "<Left>", "<Nop>", {
--     silent = true
-- })
-- vim.keymap.set({"n", "i"}, "<Right>", "<Nop>", {
--     silent = true
-- })
-- vim.keymap.set({"n", "i"}, "<Up>", "<Nop>", {
--     silent = true
-- })
-- vim.keymap.set({"n", "i"}, "<Down>", "<Nop>", {
--     silent = true
-- })

-- 1. Win 四件套映射
keymap.set({"n", "v"}, "<C-a>", "ggVG", opts) -- 全选
keymap.set({"n", "i", "v"}, "<C-s>", "<Cmd>w<CR>", opts) -- 保存
keymap.set({"n", "v"}, "<C-c>", '"+y', opts) -- 复制
keymap.set({"n", "v"}, "<C-x>", '"+d', opts) -- 剪切
keymap.set({"n", "i", "v"}, "<C-v>", function() -- 粘贴
    return vim.fn.mode():match("[iI]") and "<C-R>+" or '"+p'
end, {
    expr = true,
    silent = true
})

-- 2. 把被覆盖的功能搬到其他键
-- 递增 / 递减数字（原 <C-a>/<C-x>）
keymap.set("n", "<leader>a", "<C-a>", opts)
keymap.set("n", "<leader>x", "<C-x>", opts)

-- 块选择（原 <C-v>）
keymap.set("n", "<A-v>", "<C-v>", opts)
-- 1. 把 Ctrl+Z 映射成撤销
vim.keymap.set("n", "<C-z>", "u", {
    noremap = true,
    silent = true
})
vim.keymap.set("i", "<C-z>", "<ESC>u<CR>i", {
    noremap = true,
    silent = true,
    desc = "插入模式撤销"
})
vim.keymap.set("v", "<C-z>", "<ESC>ugv", {
    noremap = true,
    silent = true,
    desc = "可视模式撤销"
})

-- ---------- 插件 ---------- ---
-- nvim-tree
keymap.set("n", "<leader>e", ":NvimTreeToggle<CR>")

-- 2. （可选）把挂起功能搬到别的键，例如 <leader>z
-- vim.keymap.set("n", "<leader>z", "<Cmd>suspend<CR>", { noremap = true, silent = true })
-- 可选：将原始 Ctrl+S 功能迁移到 Alt+S（不推荐，极少用到）
-- keymap.set({"n","i","v"}, "<A-s>", "<C-s>", opts)
------------------------------------------
-- 一键把最近一次 error 复制到系统剪贴板 快捷键<leader>ce
vim.keymap.set("n", "<leader>ce", function()
    -- 检查 noice 插件是否存在
    local has_noice, noice = pcall(require, "noice")
    if has_noice then
        local notif = noice.get("notify")
        for _, m in ipairs(notif and notif._messages or {}) do
            if m.level == vim.log.levels.ERROR then
                vim.fn.setreg("+", m.message)
                vim.notify("Last error copied to clipboard", vim.log.levels.INFO)
                return
            end
        end
    else
        -- 如果没有 noice 插件，使用 vim.diagnostic 获取错误
        local diagnostics = vim.diagnostic.get(0, { severity = vim.diagnostic.severity.ERROR })
        if #diagnostics > 0 then
            local message = diagnostics[1].message
            vim.fn.setreg("+", message)
            vim.notify("Last error copied to clipboard", vim.log.levels.INFO)
            return
        end
    end
    vim.notify("No error found", vim.log.levels.WARN)
end, {
    desc = "Copy last error"
})
------------------------------------------
-- 复制相对/绝对路径
local function copy_path(rel)
    local path = rel and vim.fn.expand("%") or vim.fn.expand("%:p")
    vim.fn.setreg("+", path)
    vim.notify("Copied: " .. path)
end
keymap.set("n", "<leader>cp", function()
    copy_path(true)
end, {
    desc = "Copy Rel Path"
})
keymap.set("n", "<leader>pp", function()
    copy_path(false)
end, {
    desc = "Copy Abs Path"
})
-- ---------- 屏幕循环 ---------- ---

-- 整屏循环 j / k（保持列号、支持计数）
-- 屏幕循环核心功能实现
-- local ScreenLoop = {}

-- -- 获取窗口可见范围信息
-- local function get_window_info()
--   return {
--     top = vim.fn.line('w0'),       -- 窗口顶部行号
--     bottom = vim.fn.line('w$'),    -- 窗口底部行号
--     height = vim.fn.winheight(0),  -- 窗口高度
--     total_lines = vim.fn.line('$') -- 文件总行数
--   }
-- end

-- -- 处理向下循环跳转 (j)
-- function ScreenLoop.j(count)
--   count = math.max(tonumber(count) or 1, 1) -- 确保count为正数
--   local win_info = get_window_info()
--   local current_line = vim.fn.line('.')
--   local target_line = current_line + count

--   -- 处理文件末尾边界情况
--   if target_line > win_info.total_lines then
--     target_line = math.max(1, target_line - win_info.total_lines)
--   end

--   -- 屏幕内循环逻辑
--   if target_line > win_info.bottom then
--     -- 计算超出底部的行数，从顶部开始继续
--     local overflow = target_line - win_info.bottom
--     target_line = math.max(win_info.top, win_info.top + overflow - 1)
--   end

--   -- 执行跳转并保持列位置
--   vim.cmd("normal! " .. target_line .. "G" .. vim.fn.col('.') .. "|")
-- end

-- -- 处理向上循环跳转 (k)
-- function ScreenLoop.k(count)
--   count = math.max(tonumber(count) or 1, 1) -- 确保count为正数
--   local win_info = get_window_info()
--   local current_line = vim.fn.line('.')
--   local target_line = current_line - count

--   -- 处理文件开头边界情况
--   if target_line < 1 then
--     target_line = math.min(win_info.total_lines, win_info.total_lines + target_line)
--   end

--   -- 屏幕内循环逻辑
--   if target_line < win_info.top then
--     -- 计算超出顶部的行数，从底部开始继续
--     local overflow = win_info.top - target_line
--     target_line = math.min(win_info.bottom, win_info.bottom - overflow + 1)
--   end

--   -- 执行跳转并保持列位置
--   vim.cmd("normal! " .. target_line .. "G" .. vim.fn.col('.') .. "|")
-- end

-- -- 设置键映射，支持多种模式
-- local function setup_keymaps()
--   -- 普通模式
--   vim.keymap.set('n', 'j', function() ScreenLoop.j(vim.v.count1) end, 
--     { silent = true, desc = '向下移动并循环屏幕' })
--   vim.keymap.set('n', 'k', function() ScreenLoop.k(vim.v.count1) end, 
--     { silent = true, desc = '向上移动并循环屏幕' })

--   -- 可视模式
--   vim.keymap.set('v', 'j', function() 
--     local count = vim.v.count1
--     vim.cmd("normal! " .. count .. "j")
--   end, { silent = true, desc = '可视模式向下移动' })

--   vim.keymap.set('v', 'k', function() 
--     local count = vim.v.count1
--     vim.cmd("normal! " .. count .. "k")
--   end, { silent = true, desc = '可视模式向上移动' })

--   -- 运算符等待模式
--   vim.keymap.set('o', 'j', 'j', { silent = true })
--   vim.keymap.set('o', 'k', 'k', { silent = true })
-- end

-- 初始化函数
-- local function init()
--     setup_keymaps()

--     -- 行号显示自动调整：插入模式显示绝对行号，普通模式显示相对行号
--     vim.api.nvim_create_autocmd('InsertEnter', {
--         pattern = '*',
--         callback = function()
--             vim.opt.relativenumber = false
--         end
--     })

--     vim.api.nvim_create_autocmd('InsertLeave', {
--         pattern = '*',
--         callback = function()
--             vim.opt.relativenumber = true
--         end
--     })
-- end

-- 启动配置
-- init()

-- -- java idea

-- -- 跳转到声明
-- keymap.set("n", "gD", "<cmd>lua vim.lsp.buf.declaration()<CR>")
-- -- 跳转到定义
-- -- keymap.set("n", "gd", "<cmd>lua vim.lsp.buf.definition()<CR>")
-- keymap.set("n", "gd", "<cmd>Lspsaga peek_definition<CR>")
-- -- 跳转到实现
-- keymap.set("n", "gi", "<cmd>lua vim.lsp.buf.implementation()<CR>")
-- -- 跳转到类型定义
-- -- keymap.set("n", "<space>D", "<cmd>lua vim.lsp.buf.type_definition()<CR>")
-- keymap.set("n", "<space>D", "<cmd>Lspsaga peek_type_definition<CR>")
-- -- 重命名
-- keymap.set("n", "<space>rn", "<cmd>lua vim.lsp.buf.rename()<CR>")
-- -- 查找引用
-- keymap.set("n", "gr", "<cmd>lua vim.lsp.buf.references()<CR>")
-- -- 显示行诊断信息
-- keymap.set("n", "<space>sd", "<cmd>lua vim.diagnostic.setloclist()<CR>")
-- keymap.set("n", "<space>sj", "<cmd>Lspsaga diagnostic_jump_next<CR>")
-- keymap.set("n", "<space>sk", "<cmd>Lspsaga diagnostic_jump_prev<CR>")
-- -- 跳转到下一个诊断
-- -- keymap.set("n", "<S-C-j>", "<cmd>lua vim.lsp.diagnostic.goto_next()<CR>")
-- -- 格式化文档
-- keymap.set("n", "<leader>f", "<cmd>lua vim.lsp.buf.format()<CR>")
-- -- 建议操作
-- -- keymap.set("n", "<leader>a", "<cmd>lua vim.lsp.buf.code_action()<CR>")
-- -- keymap.set("n", "<leader>a", "<cmd>Lspsaga code_action<CR>")
-- keymap.set("n", "<leader>ql", "<cmd>Lspsaga code_action<CR>")

-- -- 切换bufferline
-- keymap.set("n", "<C-L>", ":bnext<CR>")
-- keymap.set("n", "<C-H>", ":bprevious<CR>")