-- GLM-4 AI 配置模块 - 基于 avante.nvim 官方规范
-- 使用独立的配置文件管理 GLM-4 设置

return {
  -- 主插件配置
  {
    "yetone/avante.nvim",
    event = "VeryLazy",
    build = "make", -- 如果需要构建
    dependencies = {
      "nvim-tree/nvim-web-devicons", -- 图标支持
      "nvim-lua/plenary.nvim",       -- 工具函数
      "MunifTanjim/nui.nvim",        -- UI组件
    },
    
    opts = function()
      -- 加载 GLM-4 配置
      local glm4_config = require("config.glm4-config")
      
      -- 设置环境变量
      glm4_config.setup_environment()
      
      -- 返回 avante 配置
      return glm4_config.get_avante_config()
    end,
    
    -- 键位配置
    keys = {
      { "<leader>ia", "<cmd>AvanteAsk<cr>", desc = "GLM-4 询问" },
      { "<leader>ie", "<cmd>AvanteEdit<cr>", desc = "GLM-4 编辑" },
      { "<leader>ir", "<cmd>AvanteRefresh<cr>", desc = "GLM-4 刷新" },
      { "<leader>is", "<cmd>AvanteStop<cr>", desc = "GLM-4 停止" },
      { "<leader>im", "<cmd>AvanteSwitchProvider<cr>", desc = "GLM-4 切换提供商" },
    },
    
    config = function(_, opts)
      -- 初始化 avante
      require("avante").setup(opts)
      
      -- 创建 GLM-4 专用命令
      vim.api.nvim_create_user_command("GLM4Chat", function(input_opts)
        require("avante.api").ask(input_opts.args)
      end, { nargs = "*", desc = "GLM-4 对话" })
      
      vim.api.nvim_create_user_command("GLM4Explain", function()
        local filetype = vim.bo.filetype
        local question = "请详细解释这段 " .. filetype .. " 代码的功能和实现原理"
        require("avante.api").ask(question)
      end, { desc = "GLM-4 解释代码" })
      
      vim.api.nvim_create_user_command("GLM4Optimize", function()
        local filetype = vim.bo.filetype
        local question = "请优化这段 " .. filetype .. " 代码，提高性能和可读性"
        require("avante.api").ask(question)
      end, { desc = "GLM-4 优化代码" })
      
      -- 状态栏集成
      vim.g.glm4_status = "GLM-4 Ready"
      vim.api.nvim_create_autocmd("User", {
        pattern = "AvanteRequestStart",
        callback = function()
          vim.g.glm4_status = "GLM-4 Thinking..."
        end,
      })
      
      vim.api.nvim_create_autocmd("User", {
        pattern = "AvanteRequestComplete",
        callback = function()
          vim.g.glm4_status = "GLM-4 Ready"
        end,
      })
      
     
    end,
  },
  
  -- GLM-4 工具模块
  {
    "nvim-lua/plenary.nvim",
    config = function()
      -- 加载配置模块
      local glm4_config = require("config.glm4-config")
      
      -- GLM-4 工具函数
      local glm4_utils = {}
      
      --- 获取当前配置
      function glm4_utils.get_config()
        return glm4_config
      end
      
      --- 切换模型
      function glm4_utils.switch_model(model)
        local valid_models = glm4_config.available_models
        local found = false
        
        for _, m in ipairs(valid_models) do
          if m == model then
            found = true
            break
          end
        end
        
        if not found then
          vim.notify("无效的模型: " .. model, vim.log.levels.ERROR)
          return
        end
        
        -- 更新 avante 配置
        local ok, avante = pcall(require, "avante")
        if ok and avante.get_config then
          local config = avante.get_config()
          if config.providers and config.providers.glm4 then
            config.providers.glm4.model = model
            avante.setup(config)
            vim.notify("GLM-4 模型已切换到: " .. model, vim.log.levels.INFO)
          end
        end
      end
      
      --- 获取可用模型列表
      function glm4_utils.get_models()
        return glm4_config.available_models
      end
      
      --- 测试连接
      function glm4_utils.test_connection()
        local valid, message = glm4_config.validate_api_key()
        if not valid then
          vim.notify("GLM-4 配置错误: " .. message, vim.log.levels.ERROR)
          return
        end
        
        vim.notify("正在测试 GLM-4 连接...", vim.log.levels.INFO)
        require("avante.api").ask("你好，这是一个连接测试。请回复\"连接成功\"。")
      end
      
      --- 获取模型信息
      function glm4_utils.get_model_info(model)
        return glm4_config.get_model_info(model)
      end
      
      --- 显示当前状态
      function glm4_utils.show_status()
        local glm4_module = require("config.glm4-config")
        local status = {
          "GLM-4 状态信息:",
          "  提供商: " .. (vim.g.avante_provider or "glm4"),
          "  模型: " .. glm4_module.api_config.model,
          "  API端点: " .. glm4_module.api_config.endpoint,
          "  状态: " .. (vim.g.glm4_status or "Unknown"),
        }
        
        vim.notify(table.concat(status, "\n"), vim.log.levels.INFO)
      end
      
      -- 导出到全局
      _G.glm4 = glm4_utils
      
      -- 创建用户命令
      vim.api.nvim_create_user_command("GLM4Test", function()
        glm4_utils.test_connection()
      end, { desc = "测试 GLM-4 连接" })
      
      vim.api.nvim_create_user_command("GLM4SwitchModel", function(opts)
        local model = opts.args ~= "" and opts.args or "glm-4-flash"
        glm4_utils.switch_model(model)
      end, { nargs = "?", desc = "切换 GLM-4 模型" })
      
      vim.api.nvim_create_user_command("GLM4Models", function()
        local models = glm4_utils.get_models()
        local info = { "可用 GLM-4 模型:" }
        for _, model in ipairs(models) do
          local model_info = glm4_utils.get_model_info(model)
          table.insert(info, string.format("  %s - %s", model, model_info.description))
        end
        vim.notify(table.concat(info, "\n"), vim.log.levels.INFO)
      end, { desc = "显示可用 GLM-4 模型" })
      
      vim.api.nvim_create_user_command("GLM4Status", function()
        glm4_utils.show_status()
      end, { desc = "显示 GLM-4 状态" })
      
      -- 额外的快捷键
      vim.keymap.set("n", "<leader>it", "<cmd>GLM4Test<cr>", { desc = "测试 GLM-4 连接" })
      vim.keymap.set("n", "<leader>im", "<cmd>GLM4SwitchModel ", { desc = "切换 GLM-4 模型" })
      vim.keymap.set("n", "<leader>iM", "<cmd>GLM4Models<cr>", { desc = "显示 GLM-4 模型" })
      vim.keymap.set("n", "<leader>is", "<cmd>GLM4Status<cr>", { desc = "显示 GLM-4 状态" })
    end,
  },
  
  -- 状态栏集成
  {
    "nvim-lualine/lualine.nvim",
    optional = true,
    config = function()
      if not package.loaded.lualine then
        return
      end
      
      local function glm4_status()
        local avante_loaded, avante = pcall(require, "avante")
        if avante_loaded and avante.get_config then
          local config = avante.get_config()
          if config and config.provider == "glm4" then
            local status = vim.g.glm4_status or "GLM-4 Ready"
            return "🤖 " .. status
          end
        end
        return ""
      end
      
      -- 安全地更新 lualine 配置
      local ok, lualine = pcall(require, "lualine")
      if ok then
        local config = lualine.get_config()
        if config and config.sections and config.sections.lualine_x then
          -- 确保不重复添加
          local found = false
          for _, component in ipairs(config.sections.lualine_x) do
            if type(component) == "function" and component() and component():match("🤖") then
              found = true
              break
            end
          end
          
          if not found then
            table.insert(config.sections.lualine_x, 1, glm4_status)
            lualine.setup(config)
          end
        end
      end
    end,
  },
}