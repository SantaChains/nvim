-- Krabby 启动画面配置
-- 提供终端 ASCII 艺术启动画面，可与现有 dashboard 共存

return {
  -- 这不是一个真正的插件，而是一个配置模块
  -- 用于管理 Krabby 启动画面的集成
  
  -- 创建启动时显示 Krabby 的自动命令
  init = function()
    -- 检查 Krabby 是否已安装
    local function has_krabby()
      return vim.fn.executable('krabby') == 1
    end
    
    -- 创建 Krabby 显示函数
    local function show_krabby()
      if not has_krabby() then
        vim.notify("🦀 Krabby 未安装。请运行: cargo install krabby", vim.log.levels.WARN)
        return
      end
      
      -- 创建一个新的缓冲区显示 Krabby
      local buf = vim.api.nvim_create_buf(false, true)
      vim.api.nvim_set_current_buf(buf)
      
      -- 设置缓冲区选项
      vim.bo[buf].modifiable = false
      vim.bo[buf].readonly = true
      vim.bo[buf].buftype = 'nofile'
      vim.bo[buf].bufhidden = 'wipe'
      vim.bo[buf].swapfile = false
      
      -- 运行 Krabby 并捕获输出
      local output = vim.fn.system('krabby')
      local lines = vim.split(output, '\n')
      
      -- 移除最后的空行
      if lines[#lines] == '' then
        table.remove(lines)
      end
      
      -- 设置缓冲区内容
      vim.bo[buf].modifiable = true
      vim.api.nvim_buf_set_lines(buf, 0, -1, false, lines)
      vim.bo[buf].modifiable = false
      
      -- 居中显示
      local win_height = vim.api.nvim_win_get_height(0)
      local content_height = #lines
      local padding = math.max(0, math.floor((win_height - content_height) / 2))
      
      if padding > 0 then
        local empty_lines = {}
        for i = 1, padding do
          table.insert(empty_lines, "")
        end
        vim.bo[buf].modifiable = true
        vim.api.nvim_buf_set_lines(buf, 0, 0, false, empty_lines)
        vim.bo[buf].modifiable = false
      end
      
      -- 设置键位映射快速退出
      vim.keymap.set('n', 'q', function()
        vim.cmd('enew')
      end, { buffer = buf, desc = "退出 Krabby 画面" })
      
      vim.keymap.set('n', '<CR>', function()
        vim.cmd('enew')
      end, { buffer = buf, desc = "退出 Krabby 画面" })
      
      vim.keymap.set('n', '<Esc>', function()
        vim.cmd('enew')
      end, { buffer = buf, desc = "退出 Krabby 画面" })
      
      -- 禁用行号和其他 UI 元素
      vim.wo.number = false
      vim.wo.relativenumber = false
      vim.wo.signcolumn = 'no'
      vim.wo.foldcolumn = '0'
      vim.wo.colorcolumn = ''
      vim.wo.cursorline = false
      vim.wo.cursorcolumn = false
      
      -- 设置高亮（如果需要）
      vim.cmd('hi clear CursorLine')
    end
    
    -- 创建用户命令
    vim.api.nvim_create_user_command('Krabby', show_krabby, {
      desc = '🦀 显示 Krabby 启动画面'
    })
    
    vim.api.nvim_create_user_command('KrabbyStart', show_krabby, {
      desc = '🦀 显示 Krabby 启动画面'
    })
    
    -- 检查是否应该在启动时显示 Krabby
    vim.api.nvim_create_autocmd('VimEnter', {
      group = vim.api.nvim_create_augroup('KrabbyStart', { clear = true }),
      callback = function()
        -- 只有在没有文件参数时才显示
        if vim.fn.argc() == 0 and vim.fn.line2byte('$') == -1 then
          -- 检查用户配置是否启用了 Krabby 启动
          if vim.g.krabby_on_startup then
            vim.defer_fn(show_krabby, 100)
          end
        end
      end,
    })
    
    -- 创建切换函数
    local function toggle_startup_dashboard()
      if vim.g.krabby_on_startup then
        vim.g.krabby_on_startup = false
        vim.notify("🦀 Krabby 启动画面已禁用，将使用默认 dashboard", vim.log.levels.INFO)
      else
        vim.g.krabby_on_startup = true
        vim.notify("🦀 Krabby 启动画面已启用", vim.log.levels.INFO)
      end
    end
    
    vim.api.nvim_create_user_command('KrabbyToggle', toggle_startup_dashboard, {
      desc = '🦀 切换 Krabby 启动画面'
    })
    
    -- 高级配置选项
    vim.api.nvim_create_user_command('KrabbyConfig', function()
      print("🦀 Krabby 配置选项:")
      print("• :Krabby - 手动显示 Krabby 画面")
      print("• :KrabbyToggle - 切换启动时显示")
      print("• :KrabbyInstall - 安装指南")
      print("• vim.g.krabby_on_startup = true/false - 设置启动显示")
      print("• 当前状态: " .. (vim.g.krabby_on_startup and "启用" or "禁用"))
    end, {
      desc = '🦀 显示 Krabby 配置信息'
    })
    
    -- 安装指南
    vim.api.nvim_create_user_command('KrabbyInstall', function()
      print("🦀 Krabby 安装指南:")
      print("1. 使用 Cargo 安装: cargo install krabby")
      print("2. 或从 GitHub 下载: https://github.com/yannjor/krabby/releases")
      print("3. 确保 krabby 在 PATH 中")
      print("4. 运行 :Krabby 测试")
      print("5. 使用 :KrabbyToggle 启用启动画面")
    end, {
      desc = '🦀 显示 Krabby 安装指南'
    })
  end
}