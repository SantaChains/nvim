-- 编辑器增强功能插件
-- 提供高级编辑功能：测试、搜索替换、专注模式等

return {
  -- 专注写作模式
  {
    'folke/zen-mode.nvim',
    cmd = 'ZenMode',
    keys = { { '<leader>z', '<CMD>ZenMode<CR>', desc = 'Zen Mode' } },
    dependencies = { 'folke/twilight.nvim' },
    opts = {
      window = {
        backdrop = 0.95,
        width = 120,
        height = 1,
        options = {
          signcolumn = 'no',
          number = false,
          relativenumber = false,
          cursorline = false,
          cursorcolumn = false,
          foldcolumn = '0',
          list = false,
        },
      },
      plugins = {
        options = {
          enabled = true,
          ruler = false,
          showcmd = false,
          laststatus = 0,
        },
        twilight = { enabled = true },
        gitsigns = { enabled = false },
        tmux = { enabled = true },
        kitty = { enabled = true, font = '+4' },
        alacritty = { enabled = false, font = '14' },
      },
    },
  },

  -- 代码高亮淡化 - 配合 zen-mode 使用
  {
    'folke/twilight.nvim',
    cmd = 'Twilight',
    -- keys = { { '<leader>W', '<CMD>Twilight<CR>', desc = 'Twilight' } },
    opts = {
      dimming = {
        alpha = 0.25,
        color = { 'Normal', '#ffffff' },
        term_bg = '#000000',
        inactive = false,
      },
      context = 10,
      treesitter = true,
      expand = {
        'function',
        'method',
        'table',
        'if_statement',
        'for_statement',
        'while_statement',
        'do_statement',
        'try_statement',
        'catch_clause',
        'finally_clause',
      },
      exclude = {},
    },
  },

  -- 全局搜索和替换
  {
    'MagicDuck/grug-far.nvim',
    cmd = 'GrugFar',
    keys = {
      { '<leader>gr', '<CMD>GrugFar<CR>', desc = 'Global search and replace' },
      { '<leader>gw', function() require('grug-far').grug_far({ prefills = { search = vim.fn.expand('<cword>') } }) end, desc = 'Search current word' },
    },
    opts = {
      windowCreationCommand = 'vsplit',
      transient = false,
      engine = 'ripgrep',
      folding = {
        enabled = true,
        save = true,
      },
      keymaps = {
        replace = { n = '<localleader>r' },
        qflist = { n = '<localleader>q' },
        syncLocations = { n = '<localleader>s' },
        syncLine = { n = '<localleader>l' },
        close = { n = '<localleader>c' },
        historyOpen = { n = '<localleader>t' },
        historyAdd = { n = '<localleader>a' },
        refresh = { n = '<localleader>f' },
        openLocation = { n = '<localleader>o' },
        gotoLocation = { n = '<enter>' },
        pickHistoryEntry = { n = '<enter>' },
        abort = { n = '<localleader>b' },
        help = { n = 'g?' },
        toggleShowCommand = { n = '<localleader>p' },
        swapEngine = { n = '<localleader>e' },
      },
      startInInsertMode = true,
      wrap = true,
      transient = false,
      icons = {
        enabled = true,
        actionEntryBullet = '  ',
        searchInput = ' ',
        replaceInput = ' ',
        filesFilterInput = ' ',
        flagsInput = ' ',
        resultsStatusReady = '󱩾 ',
        resultsStatusError = ' ',
        resultsStatusSuccess = '󰗡 ',
        resultsActionMessage = '  ',
        historyTitle = '󰋚 ',
        helpTitle = '󰞋 ',
      },
    },
  },

--   -- 测试运行器
--   {
--     'nvim-neotest/neotest',
--     dependencies = {
--       'nvim-lua/plenary.nvim',
--       'nvim-treesitter/nvim-treesitter',
--       'antoinemadec/FixCursorHold.nvim',
--       'nvim-neotest/nvim-nio',
--       -- 测试适配器
--       'nvim-neotest/neotest-python',
--       'nvim-neotest/neotest-jest',
--       'nvim-neotest/neotest-go',
--       'nvim-neotest/neotest-vitest',
--       'nvim-neotest/neotest-plenary',
--       'olimorris/neotest-rspec',
--     },
--     keys = {
--       { '<leader>tn', function() require('neotest').run.run() end, desc = 'Run nearest test' },
--       { '<leader>tf', function() require('neotest').run.run(vim.fn.expand('%')) end, desc = 'Run current file tests' },
--       { '<leader>td', function() require('neotest').run.run({ strategy = 'dap' }) end, desc = 'Debug nearest test' },
--       { '<leader>ts', function() require('neotest').run.stop() end, desc = 'Stop test run' },
--       { '<leader>ta', function() require('neotest').run.attach() end, desc = 'Attach to test process' },
--       { '<leader>to', function() require('neotest').output.open({ enter = true, auto_close = true }) end, desc = 'Open test output' },
--       { '<leader>tp', function() require('neotest').summary.toggle() end, desc = 'Toggle test summary' },
--       { '<leader>tO', function() require('neotest').output_panel.toggle() end, desc = 'Toggle output panel' },
--       { '<leader>tw', function() require('neotest').watch.toggle(vim.fn.expand('%')) end, desc = 'Toggle test watch' },
--       { '<leader>tR', function() require('neotest').run.run_last() end, desc = 'Rerun last test' },
--     },
--     config = function()
--       local neotest = require('neotest')
      
--       -- 动态加载适配器
--       local adapters = {}
      
--       -- Python 适配器
--       local python_ok, python_adapter = pcall(require, 'neotest-python')
--       if python_ok then
--         table.insert(adapters, python_adapter({
--           dap = { justMyCode = false, console = 'integratedTerminal' },
--           args = { '--verbose', '--tb=short' },
--           runner = 'pytest',
--           pytest_discover_instances = true,
--           python = function()
--             local venv_paths = { '.venv/bin/python', 'venv/bin/python', 'env/bin/python' }
--             for _, path in ipairs(venv_paths) do
--               if vim.fn.filereadable(path) == 1 then
--                 return path
--               end
--             end
--             return 'python'
--           end,
--         }))
--       end
      
--       -- Jest 适配器
--       local jest_ok, jest_adapter = pcall(require, 'neotest-jest')
--       if jest_ok then
--         table.insert(adapters, jest_adapter({
--           jestCommand = 'npm test --',
--           jestConfigFile = function(file)
--             if file:match('packages/') then
--               return string.match(file, '(.-/)src') .. 'jest.config.js'
--             end
--             return vim.fn.getcwd() .. '/jest.config.js'
--           end,
--           env = { CI = true, NODE_ENV = 'test' },
--           cwd = function(file)
--             if file:match('packages/') then
--               return string.match(file, '(.-/)src')
--             end
--             return vim.fn.getcwd()
--           end,
--           jest_test_discovery = true,
--         }))
--       end
      
--       -- Vitest 适配器
--       local vitest_ok, vitest_adapter = pcall(require, 'neotest-vitest')
--       if vitest_ok then
--         table.insert(adapters, vitest_adapter({
--           vitestCommand = 'npm run test:vitest --',
--         }))
--       end
      
--       -- Go 适配器
--       local go_ok, go_adapter = pcall(require, 'neotest-go')
--       if go_ok then
--         table.insert(adapters, go_adapter({
--           experimental = { test_table = true },
--           args = { '-count=1', '-timeout=60s', '-v' },
--         }))
--       end
      
--       -- RSpec 适配器
--       local rspec_ok, rspec_adapter = pcall(require, 'neotest-rspec')
--       if rspec_ok then
--         table.insert(adapters, rspec_adapter({
--           rspec_cmd = function()
--             return vim.tbl_flatten({ 'bundle', 'exec', 'rspec', '--format', 'json', '--format', 'documentation' })
--           end,
--         }))
--       end
      
--       -- Plenary 适配器
--       local plenary_ok, plenary_adapter = pcall(require, 'neotest-plenary')
--       if plenary_ok then
--         table.insert(adapters, plenary_adapter)
--       end
      
--       neotest.setup({
--         adapters = adapters,
--         discovery = {
--           enabled = true,
--           concurrent = 0,
--         },
--         running = {
--           concurrent = true,
--         },
--         status = {
--           enabled = true,
--           signs = true,
--           virtual_text = {
--             enabled = true,
--             format = function(test_status)
--               local status_map = {
--                 passed = '✓',
--                 failed = '✗',
--                 skipped = '⊘',
--                 running = '⟳',
--               }
--               return status_map[test_status] or '?'
--             end,
--           },
--         },
--         output = {
--           enabled = true,
--           open_on_run = true,
--           float = {
--             border = 'rounded',
--             max_width = 120,
--             max_height = 30,
--           },
--         },
--         output_panel = {
--           enabled = true,
--           open = 'botright vsplit | vertical resize 60',
--         },
--         summary = {
--           enabled = true,
--           expand_errors = true,
--           follow = true,
--           mappings = {
--             attach = 'a',
--             expand = 'e',
--             expand_all = 'E',
--             jumpto = 'i',
--             output = 'o',
--             run = 'r',
--             short = 's',
--             stop = 'x',
--             clear_marked = 'M',
--             clear_selected = 'C',
--             debug = 'd',
--             debug_marked = 'D',
--             mark = 'm',
--             next_failed = 'J',
--             prev_failed = 'K',
--             watch = 'w',
--           },
--         },
--         diagnostic = {
--           enabled = true,
--           severity = vim.diagnostic.severity.ERROR,
--         },
--       })
      
--       -- 自动运行测试
--       vim.api.nvim_create_autocmd('BufWritePost', {
--         pattern = { '*test*', 'test_*', '*.test.*', '*.spec.*' },
--         callback = function()
--           local ft = vim.bo.filetype
--           if vim.tbl_contains({ 'python', 'javascript', 'typescript', 'go', 'ruby' }, ft) then
--             neotest.run.run()
--           end
--         end,
--         group = vim.api.nvim_create_augroup('NeotestAutoRun', { clear = true }),
--       })
--     end,
--   },

--   -- 娱乐插件 - 细胞自动机
--   {
--     'eandrju/cellular-automaton.nvim',
--     cmd = 'CellularAutomaton',
--     keys = {
--       { '<leader>gol', '<CMD>CellularAutomaton game_of_life<CR>', desc = 'Game of Life' },
--       { '<leader>golr', '<CMD>CellularAutomaton make_it_rain<CR>', desc = 'Make it Rain' },
--     },
--   },
}