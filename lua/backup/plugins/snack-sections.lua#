-- 性能优化：缓存管理系统，减少重复计算
local cache = {
  stats = nil,
  stats_time = 0,
  startup_ready = false,
  dashboard_loaded = false,
}

-- 安全获取lazy统计信息，带错误处理
local function get_lazy_stats()
  local ok, lazy = pcall(require, "lazy")
  if not ok then
    return { startuptime = 0, loaded = 0, count = 0 }
  end
  
  local current_time = vim.loop.hrtime()
  -- 缓存 100ms，减少重复计算
  if not cache.stats or (current_time - cache.stats_time) > 100000000 then
    local stats = lazy.stats()
    cache.stats = stats or { startuptime = 0, loaded = 0, count = 0 }
    cache.stats_time = current_time
  end
  return cache.stats
end

-- 智能footer生成函数，适配不同状态
local function generate_footer()
  local stats = get_lazy_stats()
  local ms = stats.startuptime or 0
  
  -- 如果启动时间为 0 且还没有准备好，显示等待信息
  if ms == 0 and not cache.startup_ready then
    return string.format("⚡ SANINS loaded %d/%d plugins (calculating...)", 
      stats.loaded or 0, stats.count or 0)
  end
  
  -- 正常显示启动时间
  local formatted_ms = math.floor(ms * 100 + 0.5) / 100
  return string.format("⚡ SANINS loaded %d/%d plugins in %sms", 
    stats.loaded or 0, stats.count or 0, formatted_ms)
end

return {
  "folke/snacks.nvim",
  priority = 1000,
  lazy = false,
  ---@type snacks.Config
  opts = {
    -- 核心功能配置
    bigfile = { enabled = true },
    picker = { enabled = true },
    notifier = { enabled = true },
    indent = { enabled = true },
    input = { enabled = true },
    quickfile = { enabled = true },
    statuscolumn = { enabled = true },
    words = { enabled = true },
    dashboard = {
      enabled = true,
      preset = {
        header = [[
    ╔═══════════════════════════════════════════════════════════╗
    ║  ▓██████▓ ▓█████▄ ██▓███▓ ▓█████▄██   ██▓██████▓█████▄     ║
    ║  ██▓       ██▓ ▓██▓██▓███▓   ▓ ██▓ ▓██▓▓██ ██▓▓   ██▓ ▓██▓ ║
    ║  ▓█████▓ ▓█████▓▓██▓ ▓██▓ ▓██▓▓█████▓█████▓█████▓▓         ║
    ║       ▓██▓██▓ ▓██▓██▓   ▓▓██▓ ▓██▓▓██▓██▓     ▓██▓██▓ ▓██▓ ║
    ║  ▓██████▓▓██▓ ▓██▓██▓███▓▓██▓ ▓██▓▓██▓ ██▓██████▓▓██▓ ▓██▓ ║
    ║            ⟨⟨⟨ SANINS NEOVIM ⟩⟩⟩                           ║
    ╚═══════════════════════════════════════════════════════════╝   
     ▄▀▀         ▄▄
    ▄▀▀▀    ▄▄▄▄▀▀▀▀▄
   ▄▀▀▀▀ ▄▀▀▀▀▀▀▀▀▀▀▀
 ▄▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
▄▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▄
▀▀▀▀▀▀▀▀▀▀▀▀▀▄▀▀▀▀
▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▄
    ▀▀▀▀▀▀▀▀▀▀▀▀
     ▀▀▀▀▀▀▀▀▀▀
         ▀▀▀▀
        ]],
        keys = {
          -- 紧凑布局：图标 + 快捷键 + 描述
          { icon = "󰈞 ", key = "f", desc = "Find File", action = ":Telescope find_files" },
          { icon = "󰈔 ", key = "n", desc = "New File", action = ":ene | startinsert" },
          { icon = "󰊄 ", key = "g", desc = "Find Text", action = ":lua Snacks.dashboard.pick('live_grep')" },
          { icon = "󰒓 ", key = "c", desc = "Config", action = ":lua Snacks.dashboard.pick('files', {cwd = vim.fn.stdpath('config')})" },
          { icon = "󰒲 ", key = "l", desc = "Lazy", action = ":Lazy" },
          { icon = "󰋚 ", key = "r", desc = "Recent", action = ":lua Snacks.picker.recent()" },
          { icon = "󰔧 ", key = "t", desc = "TreeSitter Info", action = ":TSInstallInfo" },
          { icon = "󱌢 ", key = "m", desc = "Mason", action = ":Mason" },
          
          { icon = "󰒕 ", key = "h", desc = "Health Check", action = ":checkhealth" },
          { icon = "󰈆 ", key = "q", desc = "Quit", action = ":qa" },
        }
      },
      -- 使用标准sections配置，避免自定义section导致的错误
      sections = {
        { section = "header", padding = 1 },
        { section = "keys", padding = 1 },
        { section = "startup", padding = 1 },
      },
    },
  },
  

  
  config = function(_, opts)
    local ok, snacks = pcall(require, "snacks")
    if not ok then
      vim.notify("Failed to load snacks.nvim: " .. tostring(snacks), vim.log.levels.ERROR)
      return
    end
    
    -- 安全设置snacks配置
    local setup_ok, err = pcall(function() snacks.setup(opts) end)
    if not setup_ok then
      vim.notify("Failed to setup snacks.nvim: " .. tostring(err), vim.log.levels.ERROR)
      return
    end
    
    cache.dashboard_loaded = true
    
    -- 智能dashboard刷新函数
    local function refresh_dashboard()
      if cache.dashboard_loaded and vim.bo.filetype == 'snacks_dashboard' then
        vim.schedule(function()
          local dashboard_ok, dashboard_err = pcall(function() snacks.dashboard() end)
          if not dashboard_ok then
            vim.notify("Failed to refresh dashboard: " .. tostring(dashboard_err), vim.log.levels.WARN)
          end
        end)
      end
    end
    
    -- 监听 LazyVimStarted 事件来更新启动时间
    local lazy_group = vim.api.nvim_create_augroup("SaninsStartupTime", { clear = true })
    vim.api.nvim_create_autocmd("User", {
      pattern = "LazyVimStarted",
      group = lazy_group,
      callback = function()
        cache.startup_ready = true
        cache.stats = nil  -- 清空缓存以获取最新的 startuptime
        refresh_dashboard()
      end,
    })
    
    -- 智能启动检测和dashboard显示
    local dashboard_group = vim.api.nvim_create_augroup("SaninsDashboard", { clear = true })
    vim.api.nvim_create_autocmd("VimEnter", {
      group = dashboard_group,
      callback = function()
        -- 多重条件检查，确保在合适的时机显示dashboard
        if vim.fn.argc() == 0 and vim.api.nvim_buf_get_name(0) == "" then
          local lines = vim.api.nvim_buf_get_lines(0, 0, -1, false)
          local is_empty = #lines <= 1 and (lines[1] == "" or lines[1] == nil)
          
          if is_empty then
            local dashboard_ok = pcall(function() snacks.dashboard() end)
            if not dashboard_ok then
              vim.notify("Failed to show dashboard on startup", vim.log.levels.WARN)
            end
          end
        end
      end,
    })
    
    -- 缓存清理（可选，用于长时间运行的session）
    local cleanup_group = vim.api.nvim_create_augroup("SaninsCleanup", { clear = true })
    vim.api.nvim_create_autocmd("VimLeavePre", {
      group = cleanup_group,
      callback = function()
        cache.stats = nil
        cache.startup_ready = false
        cache.dashboard_loaded = false
      end,
    })
  end,
}