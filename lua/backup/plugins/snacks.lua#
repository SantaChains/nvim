return {
  "folke/snacks.nvim",
  priority = 1000,
  lazy = false,
  ---@type snacks.Config
  opts = function()
    -- 全局变量控制配置模式
    _G.dashboard_mode = _G.dashboard_mode or "preset" -- "preset" 或 "sections"
    
    -- Preset 配置方案
    local preset_config = {
      enabled = true,
      preset = {
        header = [[
    ┌─────────────────────────────────────────────────────────────┐
    │  ░██████╗░█████╗░███╗░░██╗██╗███╗░░██╗░██████╝  ▄██████▄  │
    │  ██╔════╝██╔══██╗████╗░██║██║████╗░██║██╔════╝ ██╔════██╗ │
    │  ╚█████╗░███████║██╔██╗██║██║██╔██╗██║╚█████╗░ ██║    ██║ │
    │  ░╚═══██╗██╔══██║██║╚████║██║██║╚████║░╚═══██╗ ██║    ██║ │
    │  ██████╔╝██║░░██║██║░╚███║██║██║░╚███║██████╔╝ ╚██████╔╝  │
    │  ╚═════╝░╚═╝░░╚═╝╚═╝░░╚══╝╚═╝╚═╝░░╚══╝╚═════╝░  ╚═════╝   │
    │            ▓▓▓ Next-Gen Neovim Experience ▓▓▓             │
    └─────────────────────────────────────────────────────────────┘
        ]],
        keys = {
          { icon = "󰈞 ", key = "f", desc = "Find File", action = ":lua Snacks.dashboard.pick('files')" },
          { icon = "󰈔 ", key = "n", desc = "New File", action = ":ene | startinsert" },
          { icon = "󰊄 ", key = "g", desc = "Find Text", action = ":lua Snacks.dashboard.pick('live_grep')" },
          { icon = "󰋚 ", key = "r", desc = "Recent Files", action = ":lua Snacks.dashboard.pick('oldfiles')" },
          { icon = "󰒓 ", key = "c", desc = "Config", action = ":lua Snacks.dashboard.pick('files', {cwd = vim.fn.stdpath('config')})" },
          { icon = "󰑓 ", key = "s", desc = "Restore Session", section = "session" },
          { icon = "󰒲 ", key = "l", desc = "Sanins Manager", action = ":Lazy", enabled = package.loaded.lazy ~= nil },
          { icon = "󰓙 ", key = "h", desc = "Health Check", action = ":checkhealth" },
          { icon = "󰦤 ", key = "m", desc = "Mason Tools", action = ":Mason" },
          { icon = "󰔛 ", key = "t", desc = "TreeSitter", action = ":TSInstallInfo" },
          { icon = "󰗼 ", key = "q", desc = "Quit Sanins", action = ":qa" },
          { icon = "🔄 ", key = "<F12>", desc = "Switch to Sections", action = ":lua _G.dashboard_mode = 'sections'; if vim.bo.filetype == 'snacks_dashboard' then vim.cmd('bd') end; require('snacks').dashboard()" },
        },
        footer = function()
          local stats = require("lazy").stats()
          local ms = (math.floor(stats.startuptime * 100 + 0.5) / 100)
          return "⚡ SANINS [PRESET] loaded " .. stats.loaded .. "/" .. stats.count .. " plugins in " .. ms .. "ms"
        end,
      },
    }
    
    -- Sections 配置方案
    local sections_config = {
      enabled = true,
      sections = {
        -- Header 分区
        {
          section = "header",
          text = [[
    ╔═══════════════════════════════════════════════════════════╗
    ║  ▓██████▓ ▓█████▄ ██▓███▓ ▓█████▄██   ██▓██████▓█████▄  ║
    ║  ██▓       ██▓ ▓██▓██▓███▓   ▓ ██▓ ▓██▓▓██ ██▓▓   ██▓ ▓██▓ ║
    ║  ▓█████▓ ▓█████▓▓██▓ ▓██▓ ▓██▓▓█████▓█████▓█████▓▓ ║
    ║       ▓██▓██▓ ▓██▓██▓   ▓▓██▓ ▓██▓▓██▓██▓     ▓██▓██▓ ▓██▓ ║
    ║  ▓██████▓▓██▓ ▓██▓██▓███▓▓██▓ ▓██▓▓██▓ ██▓██████▓▓██▓ ▓██▓ ║
    ║            ⟨⟨⟨ Advanced Sections Layout ⟩⟩⟩             ║
    ╚═══════════════════════════════════════════════════════════╝
          ]],
          align = "center",
          padding = 1,
        },
        
        -- 插件统计信息
        {
          text = function()
            local stats = require("lazy").stats()
            local ms = (math.floor(stats.startuptime * 100 + 0.5) / 100)
            return "⚡ SANINS [SECTIONS] loaded " .. stats.loaded .. "/" .. stats.count .. " plugins in " .. ms .. "ms"
          end,
          align = "center",
          padding = 1,
        },
        
        -- 功能按键分区（左侧）
        {
          pane = 1,
          title = "🚀 Quick Actions",
          padding = 1,
        },
        { pane = 1, icon = "󰈞 ", title = "Find File", desc = "Search files", action = ":lua Snacks.dashboard.pick('files')", key = "f" },
        { pane = 1, icon = "󰈔 ", title = "New File", desc = "Create new", action = ":ene | startinsert", key = "n" },
        { pane = 1, icon = "󰊄 ", title = "Find Text", desc = "Search text", action = ":lua Snacks.dashboard.pick('live_grep')", key = "g" },
        { pane = 1, icon = "󰒓 ", title = "Config", desc = "Edit config", action = ":lua Snacks.dashboard.pick('files', {cwd = vim.fn.stdpath('config')})", key = "c" },
        
        -- 工具分区（右侧）
        {
          pane = 2,
          title = "🔧 Development Tools",
          padding = 1,
        },
        { pane = 2, icon = "󰒲 ", title = "Lazy Manager", desc = "Plugin manager", action = ":Lazy", key = "l" },
        { pane = 2, icon = "󰓙 ", title = "Health Check", desc = "System health", action = ":checkhealth", key = "h" },
        { pane = 2, icon = "󰦤 ", title = "Mason Tools", desc = "LSP manager", action = ":Mason", key = "m" },
        { pane = 2, icon = "󰔛 ", title = "TreeSitter", desc = "Parser info", action = ":TSInstallInfo", key = "t" },
        
        -- Recent Files 分区
        {
          pane = 2,
          title = "📁 Recent Files",
          section = "recent_files",
          indent = 2,
          padding = 1,
          limit = 5,
        },
        
        -- 切换按键
        {
          text = "Press <F12> to switch to PRESET mode",
          align = "center",
          padding = 1,
          hl = "Comment",
        },
      },
    }
    
    -- 根据模式返回对应配置
    local dashboard_config = (_G.dashboard_mode == "sections") and sections_config or preset_config
    
    return {
      -- SANINS 个性化配置
      bigfile = { enabled = true },
      dashboard = dashboard_config,
      explorer = { enabled = true },
      indent = { enabled = true },
      input = { enabled = true },
      picker = { enabled = true },
      notifier = { enabled = true },
      quickfile = { enabled = true },
      scope = { enabled = true },
      scroll = { enabled = true },
      statuscolumn = { enabled = true },
      words = { enabled = true },
      image = { enabled = true }, -- 启用图像显示功能
    }
  end,
  config = function(_, opts)
    require("snacks").setup(opts)
    
    -- 添加全局切换函数
    vim.api.nvim_create_user_command("DashboardToggle", function()
      _G.dashboard_mode = (_G.dashboard_mode == "preset") and "sections" or "preset"
      -- 先检查是否在 dashboard buffer 中
      if vim.bo.filetype == 'snacks_dashboard' then
        vim.cmd('bd')
      end
      require("snacks").dashboard()
      vim.notify("Dashboard mode: " .. _G.dashboard_mode:upper(), vim.log.levels.INFO)
    end, { desc = "Toggle dashboard mode between preset and sections" })
    
    -- 添加F12键位映射
    vim.keymap.set("n", "<F12>", function()
      _G.dashboard_mode = (_G.dashboard_mode == "preset") and "sections" or "preset"
      -- 先检查是否在 dashboard buffer 中
      if vim.bo.filetype == 'snacks_dashboard' then
        vim.cmd('bd')
      end
      require("snacks").dashboard()
      vim.notify("Dashboard mode: " .. _G.dashboard_mode:upper(), vim.log.levels.INFO)
    end, { desc = "Toggle dashboard mode" })
    
    -- 确保在启动时显示 dashboard
    vim.api.nvim_create_autocmd("VimEnter", {
      group = vim.api.nvim_create_augroup("SaninsDashboard", { clear = true }),
      callback = function()
        -- 只有在没有文件参数时才显示 dashboard
        if vim.fn.argc() == 0 and vim.fn.line2byte('$') == -1 then
          require("snacks").dashboard()
        end
      end,
    })
  end,
}