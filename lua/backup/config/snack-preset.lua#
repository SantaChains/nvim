-- SANINS Snacks 配置 - 精简高效版本
-- 核心原则：简洁、稳定、高性能

local function get_stats()
  local ok, lazy = pcall(require, "lazy")
  if not ok then return {loaded = 0, count = 0, startuptime = 0} end
  
  local ok2, stats = pcall(lazy.stats)
  if not ok2 then return {loaded = 0, count = 0, startuptime = 0} end
  
  return stats or {loaded = 0, count = 0, startuptime = 0}
end

local function format_footer()
  local stats = get_stats()
  local ms = math.floor((stats.startuptime or 0) * 100 + 0.5) / 100
  return string.format("⚡ SANINS loaded %d/%d plugins in %sms", 
    stats.loaded or 0, stats.count or 0, ms)
end

return {
  "folke/snacks.nvim",
  priority = 1000,
  lazy = false,
  
  opts = {
    bigfile = { enabled = true },
    dashboard = {
      enabled = true,
      preset = {
        header = [[
    ┌─────────────────────────────────────────────────────────────┐
    │  ░██████╗░█████╗░███╗░░██╗██╗███╗░░██╗░██████╝  ▄██████▄  │
    │  ██╔════╝██╔══██╗████╗░██║██║████╗░██║██╔════╝ ██╔════██╗ │
    │  ╚█████╗░███████║██╔██╗██║██║██╔██╗██║╚█████╗░ ██║    ██║ │
    │  ░╚═══██╗██╔══██║██║╚████║██║██║╚████║░╚═══██╗ ██║    ██║ │
    │  ██████╔╝██║░░██║██║░╚███║██║██║░╚███║██████╔╝ ╚██████╔╝  │
    │  ╚═════╝░╚═╝░░╚═╝╚═╝░░╚══╝╚═╝╚═╝░░╚══╝╚═════╝░  ╚═════╝   │
    │            ▓▓▓ Next-Gen Neovim Experience ▓▓▓             │
    └─────────────────────────────────────────────────────────────┘
        ]],
        keys = {
          { icon = "󰈞 ", key = "f", desc = "Find File", action = ":lua Snacks.dashboard.pick('files')" },
          { icon = "󰈔 ", key = "n", desc = "New File", action = ":ene | startinsert" },
          { icon = "󰊄 ", key = "g", desc = "Find Text", action = ":lua Snacks.dashboard.pick('live_grep')" },
          { icon = "󰋚 ", key = "r", desc = "Recent Files", action = ":lua Snacks.dashboard.pick('oldfiles')" },
          { icon = "󰒓 ", key = "c", desc = "Config", action = ":lua Snacks.dashboard.pick('files', {cwd = vim.fn.stdpath('config')})" },
          { icon = "󰑓 ", key = "s", desc = "Restore Session", section = "session" },
          { icon = "󰒲 ", key = "l", desc = "Lazy Manager", action = ":Lazy" },
          { icon = "󰓙 ", key = "h", desc = "Check Health", action = ":checkhealth" },
          { icon = "󰦤 ", key = "m", desc = "Mason Tools", action = ":Mason" },
          { icon = "󰗼 ", key = "q", desc = "Quit", action = ":qa" },
        },
        footer = format_footer,
      },
    },
    explorer = { enabled = true },
    indent = { enabled = true },
    input = { enabled = true },
    picker = { enabled = true },
    notifier = { enabled = true },
    quickfile = { enabled = true },
    scope = { enabled = true },
    scroll = { enabled = true },
    statuscolumn = { enabled = true },
    words = { enabled = true },
    image = { enabled = true },
  },
  
  config = function(_, opts)
    local ok, snacks = pcall(require, "snacks")
    if not ok then
      vim.notify("Failed to load snacks.nvim", vim.log.levels.ERROR)
      return
    end
    
    -- 安全设置
    local success, err = pcall(snacks.setup, opts)
    if not success then
      vim.notify("Snacks setup failed: " .. tostring(err), vim.log.levels.ERROR)
      -- 尝试基础配置
      pcall(snacks.setup, {dashboard = {enabled = true}})
    end
    
    -- 简化的事件监听
    vim.api.nvim_create_autocmd("User", {
      pattern = "LazyVimStarted",
      callback = function()
        if vim.bo.filetype == 'snacks_dashboard' then
          vim.defer_fn(function() pcall(snacks.dashboard) end, 100)
        end
      end,
    })
    
    -- 简化的dashboard启动
    vim.api.nvim_create_autocmd("VimEnter", {
      callback = function()
        if vim.fn.argc() == 0 and vim.bo.filetype == "" then
          vim.defer_fn(function() 
            pcall(function() snacks.dashboard() end)
          end, 150)
        end
      end,
    })
  end,
}